package com.quantumcoders.minorapp.misc;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Handler;
import android.support.v7.app.AppCompatActivity;

import com.quantumcoders.minorapp.activities.AgentSignupActivity;
import com.quantumcoders.minorapp.activities.CitizenMainActivity;
import com.quantumcoders.minorapp.activities.CitizenSignupActivity;
import com.quantumcoders.minorapp.activities.MainActivity;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import static com.quantumcoders.minorapp.misc.Constants.AGT_LOGIN_FAILED;
import static com.quantumcoders.minorapp.misc.Constants.AGT_LOGIN_METHOD;
import static com.quantumcoders.minorapp.misc.Constants.AGT_LOGIN_SUCCESS;
import static com.quantumcoders.minorapp.misc.Constants.AGT_SIGN_UP_FAILED;
import static com.quantumcoders.minorapp.misc.Constants.AGT_SIGN_UP_METHOD;
import static com.quantumcoders.minorapp.misc.Constants.AGT_SIGN_UP_SUCCESS;
import static com.quantumcoders.minorapp.misc.Constants.COMPLAINT_REG_SUCCESS;
import static com.quantumcoders.minorapp.misc.Constants.CTZ_LOGIN_FAILED;
import static com.quantumcoders.minorapp.misc.Constants.CTZ_LOGIN_METHOD;
import static com.quantumcoders.minorapp.misc.Constants.CTZ_LOGIN_SUCCESS;
import static com.quantumcoders.minorapp.misc.Constants.CTZ_SIGN_UP_FAILED;
import static com.quantumcoders.minorapp.misc.Constants.CTZ_SIGN_UP_METHOD;
import static com.quantumcoders.minorapp.misc.Constants.CTZ_SIGN_UP_SUCCESS;
import static com.quantumcoders.minorapp.misc.Constants.FILE_COMPLAINT_METHOD;
import static com.quantumcoders.minorapp.misc.Constants.FILE_COMPLAINT_URL;
import static com.quantumcoders.minorapp.misc.Constants.NO_INTERNET;

public class ServerTask extends AsyncTask<String,String[],String[]> {
    Handler hnd=null;
    AppCompatActivity activity=null;
    File toUpload=null;

    public ServerTask(AppCompatActivity activity,Handler hnd,File file){
        this.hnd = hnd;
        this.activity = activity;
        this.toUpload=file;
    }
    public ServerTask(AppCompatActivity activity,Handler hnd){
        this(activity,hnd,null);
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
    }

    @Override
    protected String[] doInBackground(String... param) {
        String method=param[0];
        try{
            ConnectivityManager cm = (ConnectivityManager) activity.getSystemService(Context.CONNECTIVITY_SERVICE);
            NetworkInfo networkInfo = cm.getActiveNetworkInfo();

            if(networkInfo==null || !networkInfo.isConnected()){
                return stringArrayOf(NO_INTERNET);
            }
            else if(method.equals(CTZ_SIGN_UP_METHOD)){

                return (signUpCitizen(param));

            } else if(method.equals(AGT_SIGN_UP_METHOD)){

                return (signUpAgent(param));

            } else if(method.equals(CTZ_LOGIN_METHOD)){

                return loginCitizen(param);

            } else if(method.equals(AGT_LOGIN_METHOD)){

                return loginAgent(param);

            } else if(method.equals(FILE_COMPLAINT_METHOD)){

                return fileComplaint(param);

            }
        } catch(IOException ex){
            ex.printStackTrace();
            return new String[]{ex.getMessage()};
        }
        return new String[]{"DefaultReturn"};
    }

    @Override
    protected void onProgressUpdate(String[]...values) {
        super.onProgressUpdate(values);
    }

    @Override
    protected void onPostExecute(final String[] response) {
        String s = response[0];
//        System.out.println("Response - " + response[1]);
        System.out.println("Response **  -  " + s);
        if(s.equals(CTZ_SIGN_UP_SUCCESS)){  //citizen signup success

            hnd.post(() -> ((CitizenSignupActivity)activity).signUpSuccess(response));
            //s must also include the USERID/AGENTID generated by the server

        } else if(s.equals(CTZ_SIGN_UP_FAILED)){    //citizen signup failed

            hnd.post(()->{((CitizenSignupActivity)activity).signUpFailed(response);});

        } else if(s.equals(AGT_SIGN_UP_SUCCESS)){  //agent signup success

            hnd.post(() -> ((AgentSignupActivity)activity).signUpSuccess(response));
            //s must also include the USERID/AGENTID generated by the server

        } else if(s.equals(AGT_SIGN_UP_FAILED)){  //agent signup failed

            hnd.post(() -> ((AgentSignupActivity)activity).signUpFailed(response));

        } else if(s.equals(CTZ_LOGIN_SUCCESS) || s.equals(AGT_LOGIN_SUCCESS)){

            hnd.post(()-> ((MainActivity)activity).loginSuccess(response));
            //s must also include the USERID/AGENTID generated by the server

        } else if(s.equals(CTZ_LOGIN_FAILED) || s.equals(AGT_LOGIN_FAILED)){

            hnd.post(()-> ((MainActivity)activity).loginFailed(response));

        } else if(s.equals(NO_INTERNET)){
            if(activity instanceof MainActivity){
                ((MainActivity)activity).noInternet();
            } else if(activity instanceof AgentSignupActivity){
                ((AgentSignupActivity)activity).noInternet();
            } else if(activity instanceof  CitizenSignupActivity){
                ((CitizenSignupActivity)activity).noInternet();
            } else if(activity instanceof CitizenMainActivity){
                ((CitizenMainActivity)activity).noInternet();
            }else {
                System.out.println("Unknown class");
            }
        } else {
            System.out.println(s);
        }
    }



    private String[] signUpCitizen(String...param) throws IOException {

        //setup connection
        URL url = new URL(Constants.SIGNUP_URL_CITIZEN);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setDoOutput(true);

        //get parameters
        String fname = param[1];
        String lname = param[2];
        String phone = param[3];
        String email = param[4];
        String password = param[5];

        //send parameters
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream(),"UTF-8"));
        String str = "fname="+URLEncoder.encode(fname,"UTF-8")+
                "&lname="+URLEncoder.encode(lname,"UTF-8")+
                "&phone="+URLEncoder.encode(phone,"UTF-8")+
                "&email="+URLEncoder.encode(email,"UTF-8")+
                "&password="+URLEncoder.encode(password,"UTF-8");

        writer.write(str);
        writer.flush();


        //read result
        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String response[] = new String[2];
        response[0]=br.readLine();
        if(response[0].equals(CTZ_SIGN_UP_SUCCESS))response[1]=br.readLine();

        //return result
        return response;

    }

    private String[] signUpAgent(String...param) throws IOException {
        //setup connection
        URL url = new URL(Constants.SIGNUP_URL_AGENT);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setDoOutput(true);

        //get parameters
        String fname = param[1];
        String lname = param[2];
        String phone = param[3];
        String email = param[4];
        String password = param[5];

        //send parameters
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream(),"UTF-8"));
        String str = "fname="+URLEncoder.encode(fname,"UTF-8")+
                "&lname="+URLEncoder.encode(lname,"UTF-8")+
                "&phone="+URLEncoder.encode(phone,"UTF-8")+
                "&email="+URLEncoder.encode(email,"UTF-8")+
                "&password="+URLEncoder.encode(password,"UTF-8");

        writer.write(str);
        writer.flush();


        //read result
        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String response[] = new String[2];
        response[0]=br.readLine();
        if(response[0].equals(AGT_SIGN_UP_SUCCESS))response[1] = br.readLine();


        //return result
        return response;

    }

    private String[] loginCitizen(String...param) throws IOException{
        System.out.println(param[0]);
        //setup connection
        URL url = new URL(Constants.LOGIN_URL_CITIZEN);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setDoOutput(true);

        //get parameters
        String email = param[1];
        String password = param[2];

        //send parameters
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream(),"UTF-8"));
        String str = "email="+URLEncoder.encode(email,"UTF-8")+
                "&password="+URLEncoder.encode(password,"UTF-8");

        writer.write(str);
        writer.flush();


        //read result
        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String[] response=new String[3];
        response[0] = br.readLine();
        response[1] = br.readLine();
        if(response[0].equals(CTZ_LOGIN_SUCCESS))response[2]=br.readLine();


        //return result
        return response;

    }

    private String[] loginAgent(String...param) throws IOException{
        //setup connection
        URL url = new URL(Constants.LOGIN_URL_AGENT);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setDoOutput(true);

        //get parameters
        String email = param[1];
        String password = param[2];

        //send parameters
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream(),"UTF-8"));
        String str = "email="+URLEncoder.encode(email,"UTF-8")+
                "&password="+URLEncoder.encode(password,"UTF-8");

        writer.write(str);
        writer.flush();


        //read result
        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String[] response=new String[3];
        response[0] = br.readLine();
        response[1] = br.readLine();
        if(response[0].equals(AGT_LOGIN_SUCCESS))response[2] = br.readLine();


        //return result
        return response;
    }

    private String[] fileComplaint(String...param) throws IOException{


        OkHttpClient client = new OkHttpClient();
        RequestBody requestBody = new MultipartBody.Builder()
                .setType(MultipartBody.FORM)
                .addFormDataPart("category",param[1])
                .addFormDataPart("desc",param[2])
                .addFormDataPart("lat",param[3])
                .addFormDataPart("lng",param[4])
                .addFormDataPart("address",param[5])
                .addFormDataPart("userid",param[6])
                .addFormDataPart("image",toUpload.getName(),RequestBody.create(MediaType.parse("image/jpeg"),toUpload))
                .build();

        Request req = new Request.Builder().url(FILE_COMPLAINT_URL).post(requestBody).build();

        Response response = client.newCall(req).execute();

        System.out.println(response.body().string());


        return stringArrayOf(COMPLAINT_REG_SUCCESS);

    }

    public String[] stringArrayOf(String...str){
        return str;
    }

}
